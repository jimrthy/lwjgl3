<!--
Copyright LWJGL. All rights reserved.
License terms: http://lwjgl.org/license.php
-->
<project name="native-macosx" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="../build-definitions.xml"/>

	<property name="LWJGL_LIBRARY" value="liblwjgl.dylib"/>

	<!-- Ask Xcode for correct path to XCode tools -->
	<!-- Will fail if XCode Command Line Tools are not installed on 10.7+ (Lion) -->
	<exec executable="xcode-select" outputproperty="developer_path" errorproperty="xcode-error" failonerror="false" failifexecutionfails="false">
		<arg value="--print-path"/>
	</exec>
	<!-- Default to /Developer if xcode-select fails -->
	<condition property="developer_path" value="/Developer">
		<isset property="xcode-error"/>
	</condition>

	<!-- Choose a MacOSX SDK -->
	<macrodef name="find-sdkroot">
		<attribute name="version"/>

		<sequential>
			<condition property="sdkroot" value="${developer_path}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX@{version}.sdk">
				<and>
					<not><isset property="sdkroot"/></not>
					<available file="${developer_path}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX@{version}.sdk" type="dir"/>
				</and>
			</condition>
		</sequential>
	</macrodef>

	<find-sdkroot version="10.11"/>
	<find-sdkroot version="10.10"/>
	<find-sdkroot version="10.9"/>
	<find-sdkroot version="10.8"/>
	<condition property="compiler" value="clang" else="gcc"> <!-- Use clang on 10.8 or newer, gcc on 10.7 -->
		<isset property="sdkroot"/>
	</condition>
	<find-sdkroot version="10.7"/>
	<fail unless="sdkroot" message="Failed to find the MacOS X SDK."/>

	<fileset id="link-objects" dir="${bin.native}" includes="*.o"/>
	<fileset id="link-libraries" dir="${lib}/macosx/${build.arch}/">
		<include name="libffi.a"/>
	</fileset>

	<property name="macosx-version-min" value="10.7"/>
	<property name="warnings" value="-Werror -Wfatal-errors -Wall -Wextra -pedantic -Wno-extended-offsetof"/>

	<property name="src.include.rel" value="../../../${src.include}"/>
	<property name="src.native.rel" value="../../../${src.native}"/>
	<macrodef name="compile">
		<element name="arguments"/>
		<sequential>
			<apply dir="${bin.native}" executable="${compiler}" dest="${bin.native}" skipemptyfilesets="true" failonerror="true" parallel="true" taskname="Compiler">
				<arg line="-c -std=c99 -O3 -fPIC ${warnings} -DLWJGL_MACOSX -DLWJGL_${build.arch} -isysroot ${sdkroot} -mmacosx-version-min=${macosx-version-min}"/>

				<arg value="-I${sdkroot}/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers"/>

				<arg value="-I${src.include.rel}/system"/>
				<arg value="-I${src.include.rel}/system/macosx"/>

				<arguments/>

				<regexpmapper from="(\w+)\.c" to="\1.o"/>
			</apply>
		</sequential>
	</macrodef>

	<target name="compile-native-platform">
		<echo message="${sdkroot}" taskname="SDK Root"/>

		<!-- COMPILE -->
		<compile>
			<arguments>
				<arg value="-I${src.include.rel}/system/jemalloc"/>
				<arg value="-I${src.include.rel}/system/libffi"/>
				<arg value="-I${src.include.rel}/system/xxhash"/>
				<arg value="-I${src.native.rel}/system/xxhash"/> <!-- xxhash.c is included in the binding -->
				<fileset dir=".">
					<include name="${src.native}/system/*.c"/>
					<include name="${src.native}/system/libffi/*.c"/>
					<include name="${src.generated.native}/system/*.c"/>
					<include name="${src.generated.native}/system/jemalloc/*.c"/>
					<include name="${src.generated.native}/system/libc/*.c"/>
					<include name="${src.generated.native}/system/libffi/*.c"/>
					<include name="${src.generated.native}/system/simd/*.c"/>
					<include name="${src.generated.native}/system/macosx/*.c"/>
					<include name="${src.generated.native}/system/xxhash/*.c"/>
				</fileset>
			</arguments>
		</compile>

		<!-- Each binding is compiled separately -->

		<compile if:true="${binding.glfw}">
			<arguments>
				<arg value="-I${src.include.rel}/glfw"/>
				<fileset dir=".">
					<include name="${src.generated.native}/glfw/*.c"/>
				</fileset>
			</arguments>
		</compile>

		<compile if:true="${binding.opencl}">
			<arguments>
				<arg value="-I${src.include.rel}/opencl"/>
				<fileset dir="." includes="${src.generated.native}/opencl/*.c" excludes="**/*CL20.c"/>
			</arguments>
		</compile>

		<compile if:true="${binding.opengl}">
			<arguments>
				<arg value="-Wno-deprecated-declarations"/>
				<fileset dir=".">
					<include name="${src.generated.native}/opengl/cgl/*.c"/>
				</fileset>
			</arguments>
		</compile>

		<compile if:true="${binding.stb}">
			<arguments>
				<arg value="-isystem${src.include.rel}/stb"/>
				<fileset dir="." includes="${src.generated.native}/stb/*.c"/>
			</arguments>
		</compile>

		<!-- LINK -->
		<uptodate property="link-uptodate" targetfile="${lib}/${LWJGL_LIBRARY}">
			<srcfiles file="config/${platform}/build.xml"/>
			<srcfiles refid="link-objects"/>
			<srcfiles refid="link-libraries"/>
		</uptodate>

		<antcall target="-link-if-necessary"/>
	</target>

	<target name="-link-if-necessary" unless="link-uptodate">
		<antcall target="-link"/>
	</target>

	<target name="-update-dependencies" unless="${build.offline}">
		<mkdir dir="${lib}/macosx"/>
		<mkdir dir="${lib}/macosx/x64"/>

		<update-dependency name="libffi" artifact="x64/libffi.a"/>

		<update-dependency name="jemalloc" artifact="x64/libjemalloc.dylib" dest="${lib}"/>
		<update-dependency name="glfw3" artifact="x64/libglfw.dylib" dest="${lib}" if:true="${binding.glfw}"/>
		<update-dependency name="OpenAL32" artifact="x64/libopenal.dylib" dest="${lib}" if:true="${binding.openal}"/>
	</target>

	<target name="-link" depends="-update-dependencies">
		<apply executable="${compiler}" failonerror="true" parallel="true" taskname="Linker">
			<srcfile/>
			<arg line='-dynamiclib -Wl,-no_compact_unwind -mmacosx-version-min=${macosx-version-min} -o ${lib}/${LWJGL_LIBRARY}'/>
			<arg line="-framework AppKit"/>

			<fileset refid="link-objects"/>
			<fileset refid="link-libraries"/>
		</apply>

		<apply executable="strip" failonerror="true" taskname="Symbol strip">
			<arg value="-u"/>
			<arg value="-r"/>
			<filelist dir="${lib}" files="${LWJGL_LIBRARY}"/>
		</apply>
	</target>
</project>
